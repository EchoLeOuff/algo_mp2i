-----------------------------Brute force-----------------------------

Explication : Le brute force est une méthode simple qui consiste à tester toutes les solutions possibles pour trouver celle qui répond au problème, sans optimisation ni heuristique.
              Elle garantit de trouver la solution correcte mais peut être très lente si l’espace des solutions est grand.

Exemple :  Trouver si un nombre existe dans un tableau en testant chaque élément un par un.

Code en C : 

bool brute_force_search(int arr[], int n, int target) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == target)
            return true;
    }
    return false;
}

Code en Ocaml : 

let brute_force_search arr target =
  let n = Array.length arr in
  let rec aux i =
    if i = n then false
    else if arr.(i) = target then true
    else aux (i + 1)
  in
  aux 0


-----------------------------Back Tracking-----------------------------

Explication : Le backtracking est une méthode algorithmique qui construit progressivement des solutions candidates et abandonne rapidement celles qui ne peuvent pas 
                mener à une solution complète valide. Cela revient à explorer un arbre de possibilités en revenant en arrière dès qu’un choix ne fonctionne pas.

Exemple : résoudre le problème du somme cible — trouver si un sous-ensemble d’un tableau donne une somme égale à une valeur donnée.

Code en C : 

bool backtracking_sum(int arr[], int n, int target, int index) {
    if (target == 0) return true;          // solution trouvée
    if (target < 0 || index == n) return false; // pas de solution

    // essayer d'inclure arr[index]
    if (backtracking_sum(arr, n, target - arr[index], index + 1)) return true;

    // essayer sans inclure arr[index]
    return backtracking_sum(arr, n, target, index + 1);
}

Code en Ocaml : 

let rec backtracking_sum arr target index =
  if target = 0 then true
  else if target < 0 || index = Array.length arr then false
  else
    backtracking_sum arr (target - arr.(index)) (index + 1) ||
    backtracking_sum arr target (index + 1)
